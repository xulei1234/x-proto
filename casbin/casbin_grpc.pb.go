// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: casbin/casbin.proto

package casbin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Casbin_NewEnforcer_FullMethodName                       = "/casbin.Casbin/NewEnforcer"
	Casbin_NewAdapter_FullMethodName                        = "/casbin.Casbin/NewAdapter"
	Casbin_Enforce_FullMethodName                           = "/casbin.Casbin/Enforce"
	Casbin_LoadPolicy_FullMethodName                        = "/casbin.Casbin/LoadPolicy"
	Casbin_SavePolicy_FullMethodName                        = "/casbin.Casbin/SavePolicy"
	Casbin_AddPolicy_FullMethodName                         = "/casbin.Casbin/AddPolicy"
	Casbin_AddNamedPolicy_FullMethodName                    = "/casbin.Casbin/AddNamedPolicy"
	Casbin_RemovePolicy_FullMethodName                      = "/casbin.Casbin/RemovePolicy"
	Casbin_RemoveNamedPolicy_FullMethodName                 = "/casbin.Casbin/RemoveNamedPolicy"
	Casbin_RemoveFilteredPolicy_FullMethodName              = "/casbin.Casbin/RemoveFilteredPolicy"
	Casbin_RemoveFilteredNamedPolicy_FullMethodName         = "/casbin.Casbin/RemoveFilteredNamedPolicy"
	Casbin_GetPolicy_FullMethodName                         = "/casbin.Casbin/GetPolicy"
	Casbin_GetNamedPolicy_FullMethodName                    = "/casbin.Casbin/GetNamedPolicy"
	Casbin_GetFilteredPolicy_FullMethodName                 = "/casbin.Casbin/GetFilteredPolicy"
	Casbin_GetFilteredNamedPolicy_FullMethodName            = "/casbin.Casbin/GetFilteredNamedPolicy"
	Casbin_AddGroupingPolicy_FullMethodName                 = "/casbin.Casbin/AddGroupingPolicy"
	Casbin_AddNamedGroupingPolicy_FullMethodName            = "/casbin.Casbin/AddNamedGroupingPolicy"
	Casbin_RemoveGroupingPolicy_FullMethodName              = "/casbin.Casbin/RemoveGroupingPolicy"
	Casbin_RemoveNamedGroupingPolicy_FullMethodName         = "/casbin.Casbin/RemoveNamedGroupingPolicy"
	Casbin_RemoveFilteredGroupingPolicy_FullMethodName      = "/casbin.Casbin/RemoveFilteredGroupingPolicy"
	Casbin_RemoveFilteredNamedGroupingPolicy_FullMethodName = "/casbin.Casbin/RemoveFilteredNamedGroupingPolicy"
	Casbin_GetGroupingPolicy_FullMethodName                 = "/casbin.Casbin/GetGroupingPolicy"
	Casbin_GetNamedGroupingPolicy_FullMethodName            = "/casbin.Casbin/GetNamedGroupingPolicy"
	Casbin_GetFilteredGroupingPolicy_FullMethodName         = "/casbin.Casbin/GetFilteredGroupingPolicy"
	Casbin_GetFilteredNamedGroupingPolicy_FullMethodName    = "/casbin.Casbin/GetFilteredNamedGroupingPolicy"
	Casbin_GetAllSubjects_FullMethodName                    = "/casbin.Casbin/GetAllSubjects"
	Casbin_GetAllNamedSubjects_FullMethodName               = "/casbin.Casbin/GetAllNamedSubjects"
	Casbin_GetAllObjects_FullMethodName                     = "/casbin.Casbin/GetAllObjects"
	Casbin_GetAllNamedObjects_FullMethodName                = "/casbin.Casbin/GetAllNamedObjects"
	Casbin_GetAllActions_FullMethodName                     = "/casbin.Casbin/GetAllActions"
	Casbin_GetAllNamedActions_FullMethodName                = "/casbin.Casbin/GetAllNamedActions"
	Casbin_GetAllRoles_FullMethodName                       = "/casbin.Casbin/GetAllRoles"
	Casbin_GetAllNamedRoles_FullMethodName                  = "/casbin.Casbin/GetAllNamedRoles"
	Casbin_HasPolicy_FullMethodName                         = "/casbin.Casbin/HasPolicy"
	Casbin_HasNamedPolicy_FullMethodName                    = "/casbin.Casbin/HasNamedPolicy"
	Casbin_HasGroupingPolicy_FullMethodName                 = "/casbin.Casbin/HasGroupingPolicy"
	Casbin_HasNamedGroupingPolicy_FullMethodName            = "/casbin.Casbin/HasNamedGroupingPolicy"
	Casbin_UpdatePolicy_FullMethodName                      = "/casbin.Casbin/UpdatePolicy"
	Casbin_UpdatePolicies_FullMethodName                    = "/casbin.Casbin/UpdatePolicies"
)

// CasbinClient is the client API for Casbin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CasbinClient interface {
	NewEnforcer(ctx context.Context, in *NewEnforcerRequest, opts ...grpc.CallOption) (*NewEnforcerReply, error)
	NewAdapter(ctx context.Context, in *NewAdapterRequest, opts ...grpc.CallOption) (*NewAdapterReply, error)
	Enforce(ctx context.Context, in *EnforceRequest, opts ...grpc.CallOption) (*BoolReply, error)
	LoadPolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	SavePolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	AddPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	AddNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	RemovePolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	RemoveNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	RemoveFilteredPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	RemoveFilteredNamedPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	GetPolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Array2DReply, error)
	GetNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error)
	GetFilteredPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error)
	GetFilteredNamedPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error)
	AddGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	AddNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	RemoveGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	RemoveNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	RemoveFilteredGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	RemoveFilteredNamedGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	GetGroupingPolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Array2DReply, error)
	GetNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error)
	GetFilteredGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error)
	GetFilteredNamedGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error)
	GetAllSubjects(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	GetAllNamedSubjects(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	GetAllObjects(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	GetAllNamedObjects(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	GetAllActions(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	GetAllNamedActions(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	GetAllRoles(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	GetAllNamedRoles(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	HasPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	HasNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	HasGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	HasNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	UpdatePolicies(ctx context.Context, in *UpdatePoliciesRequest, opts ...grpc.CallOption) (*BoolReply, error)
}

type casbinClient struct {
	cc grpc.ClientConnInterface
}

func NewCasbinClient(cc grpc.ClientConnInterface) CasbinClient {
	return &casbinClient{cc}
}

func (c *casbinClient) NewEnforcer(ctx context.Context, in *NewEnforcerRequest, opts ...grpc.CallOption) (*NewEnforcerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewEnforcerReply)
	err := c.cc.Invoke(ctx, Casbin_NewEnforcer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) NewAdapter(ctx context.Context, in *NewAdapterRequest, opts ...grpc.CallOption) (*NewAdapterReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewAdapterReply)
	err := c.cc.Invoke(ctx, Casbin_NewAdapter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) Enforce(ctx context.Context, in *EnforceRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_Enforce_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) LoadPolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, Casbin_LoadPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) SavePolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, Casbin_SavePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) AddPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_AddPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) AddNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_AddNamedPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemovePolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_RemovePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemoveNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_RemoveNamedPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemoveFilteredPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_RemoveFilteredPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemoveFilteredNamedPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_RemoveFilteredNamedPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetPolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Array2DReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Array2DReply)
	err := c.cc.Invoke(ctx, Casbin_GetPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Array2DReply)
	err := c.cc.Invoke(ctx, Casbin_GetNamedPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetFilteredPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Array2DReply)
	err := c.cc.Invoke(ctx, Casbin_GetFilteredPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetFilteredNamedPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Array2DReply)
	err := c.cc.Invoke(ctx, Casbin_GetFilteredNamedPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) AddGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_AddGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) AddNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_AddNamedGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemoveGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_RemoveGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemoveNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_RemoveNamedGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemoveFilteredGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_RemoveFilteredGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemoveFilteredNamedGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_RemoveFilteredNamedGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetGroupingPolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Array2DReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Array2DReply)
	err := c.cc.Invoke(ctx, Casbin_GetGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Array2DReply)
	err := c.cc.Invoke(ctx, Casbin_GetNamedGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetFilteredGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Array2DReply)
	err := c.cc.Invoke(ctx, Casbin_GetFilteredGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetFilteredNamedGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Array2DReply)
	err := c.cc.Invoke(ctx, Casbin_GetFilteredNamedGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetAllSubjects(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, Casbin_GetAllSubjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetAllNamedSubjects(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, Casbin_GetAllNamedSubjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetAllObjects(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, Casbin_GetAllObjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetAllNamedObjects(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, Casbin_GetAllNamedObjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetAllActions(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, Casbin_GetAllActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetAllNamedActions(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, Casbin_GetAllNamedActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetAllRoles(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, Casbin_GetAllRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetAllNamedRoles(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, Casbin_GetAllNamedRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) HasPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_HasPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) HasNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_HasNamedPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) HasGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_HasGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) HasNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_HasNamedGroupingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_UpdatePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) UpdatePolicies(ctx context.Context, in *UpdatePoliciesRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_UpdatePolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CasbinServer is the server API for Casbin service.
// All implementations must embed UnimplementedCasbinServer
// for forward compatibility.
type CasbinServer interface {
	NewEnforcer(context.Context, *NewEnforcerRequest) (*NewEnforcerReply, error)
	NewAdapter(context.Context, *NewAdapterRequest) (*NewAdapterReply, error)
	Enforce(context.Context, *EnforceRequest) (*BoolReply, error)
	LoadPolicy(context.Context, *EmptyRequest) (*EmptyReply, error)
	SavePolicy(context.Context, *EmptyRequest) (*EmptyReply, error)
	AddPolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	AddNamedPolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	RemovePolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	RemoveNamedPolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	RemoveFilteredPolicy(context.Context, *FilteredPolicyRequest) (*BoolReply, error)
	RemoveFilteredNamedPolicy(context.Context, *FilteredPolicyRequest) (*BoolReply, error)
	GetPolicy(context.Context, *EmptyRequest) (*Array2DReply, error)
	GetNamedPolicy(context.Context, *PolicyRequest) (*Array2DReply, error)
	GetFilteredPolicy(context.Context, *FilteredPolicyRequest) (*Array2DReply, error)
	GetFilteredNamedPolicy(context.Context, *FilteredPolicyRequest) (*Array2DReply, error)
	AddGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	AddNamedGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	RemoveGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	RemoveNamedGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	RemoveFilteredGroupingPolicy(context.Context, *FilteredPolicyRequest) (*BoolReply, error)
	RemoveFilteredNamedGroupingPolicy(context.Context, *FilteredPolicyRequest) (*BoolReply, error)
	GetGroupingPolicy(context.Context, *EmptyRequest) (*Array2DReply, error)
	GetNamedGroupingPolicy(context.Context, *PolicyRequest) (*Array2DReply, error)
	GetFilteredGroupingPolicy(context.Context, *FilteredPolicyRequest) (*Array2DReply, error)
	GetFilteredNamedGroupingPolicy(context.Context, *FilteredPolicyRequest) (*Array2DReply, error)
	GetAllSubjects(context.Context, *EmptyRequest) (*ArrayReply, error)
	GetAllNamedSubjects(context.Context, *SimpleGetRequest) (*ArrayReply, error)
	GetAllObjects(context.Context, *EmptyRequest) (*ArrayReply, error)
	GetAllNamedObjects(context.Context, *SimpleGetRequest) (*ArrayReply, error)
	GetAllActions(context.Context, *EmptyRequest) (*ArrayReply, error)
	GetAllNamedActions(context.Context, *SimpleGetRequest) (*ArrayReply, error)
	GetAllRoles(context.Context, *EmptyRequest) (*ArrayReply, error)
	GetAllNamedRoles(context.Context, *SimpleGetRequest) (*ArrayReply, error)
	HasPolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	HasNamedPolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	HasGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	HasNamedGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error)
	UpdatePolicy(context.Context, *UpdatePolicyRequest) (*BoolReply, error)
	UpdatePolicies(context.Context, *UpdatePoliciesRequest) (*BoolReply, error)
	mustEmbedUnimplementedCasbinServer()
}

// UnimplementedCasbinServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCasbinServer struct{}

func (UnimplementedCasbinServer) NewEnforcer(context.Context, *NewEnforcerRequest) (*NewEnforcerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewEnforcer not implemented")
}
func (UnimplementedCasbinServer) NewAdapter(context.Context, *NewAdapterRequest) (*NewAdapterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAdapter not implemented")
}
func (UnimplementedCasbinServer) Enforce(context.Context, *EnforceRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enforce not implemented")
}
func (UnimplementedCasbinServer) LoadPolicy(context.Context, *EmptyRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadPolicy not implemented")
}
func (UnimplementedCasbinServer) SavePolicy(context.Context, *EmptyRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePolicy not implemented")
}
func (UnimplementedCasbinServer) AddPolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPolicy not implemented")
}
func (UnimplementedCasbinServer) AddNamedPolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNamedPolicy not implemented")
}
func (UnimplementedCasbinServer) RemovePolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePolicy not implemented")
}
func (UnimplementedCasbinServer) RemoveNamedPolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNamedPolicy not implemented")
}
func (UnimplementedCasbinServer) RemoveFilteredPolicy(context.Context, *FilteredPolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFilteredPolicy not implemented")
}
func (UnimplementedCasbinServer) RemoveFilteredNamedPolicy(context.Context, *FilteredPolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFilteredNamedPolicy not implemented")
}
func (UnimplementedCasbinServer) GetPolicy(context.Context, *EmptyRequest) (*Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedCasbinServer) GetNamedPolicy(context.Context, *PolicyRequest) (*Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamedPolicy not implemented")
}
func (UnimplementedCasbinServer) GetFilteredPolicy(context.Context, *FilteredPolicyRequest) (*Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredPolicy not implemented")
}
func (UnimplementedCasbinServer) GetFilteredNamedPolicy(context.Context, *FilteredPolicyRequest) (*Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredNamedPolicy not implemented")
}
func (UnimplementedCasbinServer) AddGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroupingPolicy not implemented")
}
func (UnimplementedCasbinServer) AddNamedGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNamedGroupingPolicy not implemented")
}
func (UnimplementedCasbinServer) RemoveGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupingPolicy not implemented")
}
func (UnimplementedCasbinServer) RemoveNamedGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNamedGroupingPolicy not implemented")
}
func (UnimplementedCasbinServer) RemoveFilteredGroupingPolicy(context.Context, *FilteredPolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFilteredGroupingPolicy not implemented")
}
func (UnimplementedCasbinServer) RemoveFilteredNamedGroupingPolicy(context.Context, *FilteredPolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFilteredNamedGroupingPolicy not implemented")
}
func (UnimplementedCasbinServer) GetGroupingPolicy(context.Context, *EmptyRequest) (*Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupingPolicy not implemented")
}
func (UnimplementedCasbinServer) GetNamedGroupingPolicy(context.Context, *PolicyRequest) (*Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamedGroupingPolicy not implemented")
}
func (UnimplementedCasbinServer) GetFilteredGroupingPolicy(context.Context, *FilteredPolicyRequest) (*Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredGroupingPolicy not implemented")
}
func (UnimplementedCasbinServer) GetFilteredNamedGroupingPolicy(context.Context, *FilteredPolicyRequest) (*Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredNamedGroupingPolicy not implemented")
}
func (UnimplementedCasbinServer) GetAllSubjects(context.Context, *EmptyRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSubjects not implemented")
}
func (UnimplementedCasbinServer) GetAllNamedSubjects(context.Context, *SimpleGetRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNamedSubjects not implemented")
}
func (UnimplementedCasbinServer) GetAllObjects(context.Context, *EmptyRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllObjects not implemented")
}
func (UnimplementedCasbinServer) GetAllNamedObjects(context.Context, *SimpleGetRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNamedObjects not implemented")
}
func (UnimplementedCasbinServer) GetAllActions(context.Context, *EmptyRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllActions not implemented")
}
func (UnimplementedCasbinServer) GetAllNamedActions(context.Context, *SimpleGetRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNamedActions not implemented")
}
func (UnimplementedCasbinServer) GetAllRoles(context.Context, *EmptyRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRoles not implemented")
}
func (UnimplementedCasbinServer) GetAllNamedRoles(context.Context, *SimpleGetRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNamedRoles not implemented")
}
func (UnimplementedCasbinServer) HasPolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasPolicy not implemented")
}
func (UnimplementedCasbinServer) HasNamedPolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasNamedPolicy not implemented")
}
func (UnimplementedCasbinServer) HasGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasGroupingPolicy not implemented")
}
func (UnimplementedCasbinServer) HasNamedGroupingPolicy(context.Context, *PolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasNamedGroupingPolicy not implemented")
}
func (UnimplementedCasbinServer) UpdatePolicy(context.Context, *UpdatePolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (UnimplementedCasbinServer) UpdatePolicies(context.Context, *UpdatePoliciesRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicies not implemented")
}
func (UnimplementedCasbinServer) mustEmbedUnimplementedCasbinServer() {}
func (UnimplementedCasbinServer) testEmbeddedByValue()                {}

// UnsafeCasbinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CasbinServer will
// result in compilation errors.
type UnsafeCasbinServer interface {
	mustEmbedUnimplementedCasbinServer()
}

func RegisterCasbinServer(s grpc.ServiceRegistrar, srv CasbinServer) {
	// If the following call pancis, it indicates UnimplementedCasbinServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Casbin_ServiceDesc, srv)
}

func _Casbin_NewEnforcer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewEnforcerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).NewEnforcer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_NewEnforcer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).NewEnforcer(ctx, req.(*NewEnforcerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_NewAdapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAdapterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).NewAdapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_NewAdapter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).NewAdapter(ctx, req.(*NewAdapterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_Enforce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnforceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).Enforce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_Enforce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).Enforce(ctx, req.(*EnforceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_LoadPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).LoadPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_LoadPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).LoadPolicy(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_SavePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).SavePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_SavePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).SavePolicy(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_AddPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).AddPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_AddPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).AddPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_AddNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).AddNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_AddNamedPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).AddNamedPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemovePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemovePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_RemovePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemovePolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemoveNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemoveNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_RemoveNamedPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemoveNamedPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemoveFilteredPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemoveFilteredPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_RemoveFilteredPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemoveFilteredPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemoveFilteredNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemoveFilteredNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_RemoveFilteredNamedPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemoveFilteredNamedPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetPolicy(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetNamedPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetNamedPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetFilteredPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetFilteredPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetFilteredPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetFilteredPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetFilteredNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetFilteredNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetFilteredNamedPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetFilteredNamedPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_AddGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).AddGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_AddGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).AddGroupingPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_AddNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).AddNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_AddNamedGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).AddNamedGroupingPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemoveGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemoveGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_RemoveGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemoveGroupingPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemoveNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemoveNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_RemoveNamedGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemoveNamedGroupingPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemoveFilteredGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemoveFilteredGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_RemoveFilteredGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemoveFilteredGroupingPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemoveFilteredNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemoveFilteredNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_RemoveFilteredNamedGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemoveFilteredNamedGroupingPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetGroupingPolicy(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetNamedGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetNamedGroupingPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetFilteredGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetFilteredGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetFilteredGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetFilteredGroupingPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetFilteredNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetFilteredNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetFilteredNamedGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetFilteredNamedGroupingPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetAllSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetAllSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetAllSubjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetAllSubjects(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetAllNamedSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetAllNamedSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetAllNamedSubjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetAllNamedSubjects(ctx, req.(*SimpleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetAllObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetAllObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetAllObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetAllObjects(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetAllNamedObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetAllNamedObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetAllNamedObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetAllNamedObjects(ctx, req.(*SimpleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetAllActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetAllActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetAllActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetAllActions(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetAllNamedActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetAllNamedActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetAllNamedActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetAllNamedActions(ctx, req.(*SimpleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetAllRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetAllRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetAllRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetAllRoles(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetAllNamedRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetAllNamedRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetAllNamedRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetAllNamedRoles(ctx, req.(*SimpleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_HasPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).HasPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_HasPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).HasPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_HasNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).HasNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_HasNamedPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).HasNamedPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_HasGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).HasGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_HasGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).HasGroupingPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_HasNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).HasNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_HasNamedGroupingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).HasNamedGroupingPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_UpdatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).UpdatePolicy(ctx, req.(*UpdatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_UpdatePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).UpdatePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_UpdatePolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).UpdatePolicies(ctx, req.(*UpdatePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Casbin_ServiceDesc is the grpc.ServiceDesc for Casbin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Casbin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "casbin.Casbin",
	HandlerType: (*CasbinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewEnforcer",
			Handler:    _Casbin_NewEnforcer_Handler,
		},
		{
			MethodName: "NewAdapter",
			Handler:    _Casbin_NewAdapter_Handler,
		},
		{
			MethodName: "Enforce",
			Handler:    _Casbin_Enforce_Handler,
		},
		{
			MethodName: "LoadPolicy",
			Handler:    _Casbin_LoadPolicy_Handler,
		},
		{
			MethodName: "SavePolicy",
			Handler:    _Casbin_SavePolicy_Handler,
		},
		{
			MethodName: "AddPolicy",
			Handler:    _Casbin_AddPolicy_Handler,
		},
		{
			MethodName: "AddNamedPolicy",
			Handler:    _Casbin_AddNamedPolicy_Handler,
		},
		{
			MethodName: "RemovePolicy",
			Handler:    _Casbin_RemovePolicy_Handler,
		},
		{
			MethodName: "RemoveNamedPolicy",
			Handler:    _Casbin_RemoveNamedPolicy_Handler,
		},
		{
			MethodName: "RemoveFilteredPolicy",
			Handler:    _Casbin_RemoveFilteredPolicy_Handler,
		},
		{
			MethodName: "RemoveFilteredNamedPolicy",
			Handler:    _Casbin_RemoveFilteredNamedPolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _Casbin_GetPolicy_Handler,
		},
		{
			MethodName: "GetNamedPolicy",
			Handler:    _Casbin_GetNamedPolicy_Handler,
		},
		{
			MethodName: "GetFilteredPolicy",
			Handler:    _Casbin_GetFilteredPolicy_Handler,
		},
		{
			MethodName: "GetFilteredNamedPolicy",
			Handler:    _Casbin_GetFilteredNamedPolicy_Handler,
		},
		{
			MethodName: "AddGroupingPolicy",
			Handler:    _Casbin_AddGroupingPolicy_Handler,
		},
		{
			MethodName: "AddNamedGroupingPolicy",
			Handler:    _Casbin_AddNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "RemoveGroupingPolicy",
			Handler:    _Casbin_RemoveGroupingPolicy_Handler,
		},
		{
			MethodName: "RemoveNamedGroupingPolicy",
			Handler:    _Casbin_RemoveNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "RemoveFilteredGroupingPolicy",
			Handler:    _Casbin_RemoveFilteredGroupingPolicy_Handler,
		},
		{
			MethodName: "RemoveFilteredNamedGroupingPolicy",
			Handler:    _Casbin_RemoveFilteredNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "GetGroupingPolicy",
			Handler:    _Casbin_GetGroupingPolicy_Handler,
		},
		{
			MethodName: "GetNamedGroupingPolicy",
			Handler:    _Casbin_GetNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "GetFilteredGroupingPolicy",
			Handler:    _Casbin_GetFilteredGroupingPolicy_Handler,
		},
		{
			MethodName: "GetFilteredNamedGroupingPolicy",
			Handler:    _Casbin_GetFilteredNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "GetAllSubjects",
			Handler:    _Casbin_GetAllSubjects_Handler,
		},
		{
			MethodName: "GetAllNamedSubjects",
			Handler:    _Casbin_GetAllNamedSubjects_Handler,
		},
		{
			MethodName: "GetAllObjects",
			Handler:    _Casbin_GetAllObjects_Handler,
		},
		{
			MethodName: "GetAllNamedObjects",
			Handler:    _Casbin_GetAllNamedObjects_Handler,
		},
		{
			MethodName: "GetAllActions",
			Handler:    _Casbin_GetAllActions_Handler,
		},
		{
			MethodName: "GetAllNamedActions",
			Handler:    _Casbin_GetAllNamedActions_Handler,
		},
		{
			MethodName: "GetAllRoles",
			Handler:    _Casbin_GetAllRoles_Handler,
		},
		{
			MethodName: "GetAllNamedRoles",
			Handler:    _Casbin_GetAllNamedRoles_Handler,
		},
		{
			MethodName: "HasPolicy",
			Handler:    _Casbin_HasPolicy_Handler,
		},
		{
			MethodName: "HasNamedPolicy",
			Handler:    _Casbin_HasNamedPolicy_Handler,
		},
		{
			MethodName: "HasGroupingPolicy",
			Handler:    _Casbin_HasGroupingPolicy_Handler,
		},
		{
			MethodName: "HasNamedGroupingPolicy",
			Handler:    _Casbin_HasNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _Casbin_UpdatePolicy_Handler,
		},
		{
			MethodName: "UpdatePolicies",
			Handler:    _Casbin_UpdatePolicies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "casbin/casbin.proto",
}
