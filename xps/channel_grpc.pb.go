// protoc  --go_out=. --go-grpc_out=. *.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: channel.proto

package xps

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	XService_RegisterAgent_FullMethodName = "/xps.XService/RegisterAgent"
	XService_ReportHBS_FullMethodName     = "/xps.XService/ReportHBS"
	XService_Config_FullMethodName        = "/xps.XService/Config"
	XService_Command_FullMethodName       = "/xps.XService/Command"
	XService_Log_FullMethodName           = "/xps.XService/Log"
	XService_Msg_FullMethodName           = "/xps.XService/Msg"
)

// XServiceClient is the client API for XService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XServiceClient interface {
	// 注册agent节点
	RegisterAgent(ctx context.Context, in *RegRequest, opts ...grpc.CallOption) (*Empty, error)
	// 心跳上报客户端状态
	ReportHBS(ctx context.Context, in *HBSRequest, opts ...grpc.CallOption) (*Empty, error)
	Config(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigReply, error)
	// 获取需要执行的任务, 通常是命令, 应保持流式推送，客户端不应主动关闭
	Command(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CmdReply], error)
	// 日志上传,以行或字节切分上传
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Empty, error)
	// 一般信息上报
	Msg(ctx context.Context, in *MsgRequest, opts ...grpc.CallOption) (*Empty, error)
}

type xServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewXServiceClient(cc grpc.ClientConnInterface) XServiceClient {
	return &xServiceClient{cc}
}

func (c *xServiceClient) RegisterAgent(ctx context.Context, in *RegRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, XService_RegisterAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xServiceClient) ReportHBS(ctx context.Context, in *HBSRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, XService_ReportHBS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xServiceClient) Config(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigReply)
	err := c.cc.Invoke(ctx, XService_Config_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xServiceClient) Command(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CmdReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &XService_ServiceDesc.Streams[0], XService_Command_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, CmdReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XService_CommandClient = grpc.ServerStreamingClient[CmdReply]

func (c *xServiceClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, XService_Log_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xServiceClient) Msg(ctx context.Context, in *MsgRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, XService_Msg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XServiceServer is the server API for XService service.
// All implementations must embed UnimplementedXServiceServer
// for forward compatibility.
type XServiceServer interface {
	// 注册agent节点
	RegisterAgent(context.Context, *RegRequest) (*Empty, error)
	// 心跳上报客户端状态
	ReportHBS(context.Context, *HBSRequest) (*Empty, error)
	Config(context.Context, *ConfigRequest) (*ConfigReply, error)
	// 获取需要执行的任务, 通常是命令, 应保持流式推送，客户端不应主动关闭
	Command(*Empty, grpc.ServerStreamingServer[CmdReply]) error
	// 日志上传,以行或字节切分上传
	Log(context.Context, *LogRequest) (*Empty, error)
	// 一般信息上报
	Msg(context.Context, *MsgRequest) (*Empty, error)
	mustEmbedUnimplementedXServiceServer()
}

// UnimplementedXServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedXServiceServer struct{}

func (UnimplementedXServiceServer) RegisterAgent(context.Context, *RegRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAgent not implemented")
}
func (UnimplementedXServiceServer) ReportHBS(context.Context, *HBSRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportHBS not implemented")
}
func (UnimplementedXServiceServer) Config(context.Context, *ConfigRequest) (*ConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (UnimplementedXServiceServer) Command(*Empty, grpc.ServerStreamingServer[CmdReply]) error {
	return status.Errorf(codes.Unimplemented, "method Command not implemented")
}
func (UnimplementedXServiceServer) Log(context.Context, *LogRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedXServiceServer) Msg(context.Context, *MsgRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Msg not implemented")
}
func (UnimplementedXServiceServer) mustEmbedUnimplementedXServiceServer() {}
func (UnimplementedXServiceServer) testEmbeddedByValue()                  {}

// UnsafeXServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XServiceServer will
// result in compilation errors.
type UnsafeXServiceServer interface {
	mustEmbedUnimplementedXServiceServer()
}

func RegisterXServiceServer(s grpc.ServiceRegistrar, srv XServiceServer) {
	// If the following call pancis, it indicates UnimplementedXServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&XService_ServiceDesc, srv)
}

func _XService_RegisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XServiceServer).RegisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XService_RegisterAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XServiceServer).RegisterAgent(ctx, req.(*RegRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XService_ReportHBS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HBSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XServiceServer).ReportHBS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XService_ReportHBS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XServiceServer).ReportHBS(ctx, req.(*HBSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XService_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XServiceServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XService_Config_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XServiceServer).Config(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XService_Command_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XServiceServer).Command(m, &grpc.GenericServerStream[Empty, CmdReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XService_CommandServer = grpc.ServerStreamingServer[CmdReply]

func _XService_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XServiceServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XService_Log_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XServiceServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XService_Msg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XServiceServer).Msg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XService_Msg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XServiceServer).Msg(ctx, req.(*MsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// XService_ServiceDesc is the grpc.ServiceDesc for XService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xps.XService",
	HandlerType: (*XServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAgent",
			Handler:    _XService_RegisterAgent_Handler,
		},
		{
			MethodName: "ReportHBS",
			Handler:    _XService_ReportHBS_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _XService_Config_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _XService_Log_Handler,
		},
		{
			MethodName: "Msg",
			Handler:    _XService_Msg_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Command",
			Handler:       _XService_Command_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "channel.proto",
}
