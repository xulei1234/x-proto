// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: xps/portal.proto

package xps

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	XPortal_Nodes_FullMethodName      = "/xps.XPortal/Nodes"
	XPortal_ExecCmd_FullMethodName    = "/xps.XPortal/ExecCmd"
	XPortal_RecvLog_FullMethodName    = "/xps.XPortal/RecvLog"
	XPortal_CollectMsg_FullMethodName = "/xps.XPortal/CollectMsg"
	XPortal_Subscribe_FullMethodName  = "/xps.XPortal/Subscribe"
	XPortal_PutFile_FullMethodName    = "/xps.XPortal/PutFile"
	XPortal_FileMd5_FullMethodName    = "/xps.XPortal/FileMd5"
	XPortal_WatchNodes_FullMethodName = "/xps.XPortal/WatchNodes"
)

// XPortalClient is the client API for XPortal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XPortalClient interface {
	// 查询 agent 节点列表
	Nodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NodeReply], error)
	// 执行命令
	ExecCmd(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*Empty, error)
	// 建立日志接收通道
	RecvLog(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogReply], error)
	// 获取一般信息，持续推送, 根据agent不同上报调用区分类型
	CollectMsg(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MsgReply], error)
	// 订阅agent上报的数据
	Subscribe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Payload], error)
	// 上传文件，暂存在channel节点上
	PutFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileShard, Empty], error)
	// channel上保存文件的md5值信息
	FileMd5(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FileMd5Reply, error)
	// 订阅 agent 节点变化
	WatchNodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NodeEventReply], error)
}

type xPortalClient struct {
	cc grpc.ClientConnInterface
}

func NewXPortalClient(cc grpc.ClientConnInterface) XPortalClient {
	return &xPortalClient{cc}
}

func (c *xPortalClient) Nodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NodeReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &XPortal_ServiceDesc.Streams[0], XPortal_Nodes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, NodeReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XPortal_NodesClient = grpc.ServerStreamingClient[NodeReply]

func (c *xPortalClient) ExecCmd(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, XPortal_ExecCmd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xPortalClient) RecvLog(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &XPortal_ServiceDesc.Streams[1], XPortal_RecvLog_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, LogReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XPortal_RecvLogClient = grpc.ServerStreamingClient[LogReply]

func (c *xPortalClient) CollectMsg(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MsgReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &XPortal_ServiceDesc.Streams[2], XPortal_CollectMsg_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, MsgReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XPortal_CollectMsgClient = grpc.ServerStreamingClient[MsgReply]

func (c *xPortalClient) Subscribe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Payload], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &XPortal_ServiceDesc.Streams[3], XPortal_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, Payload]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XPortal_SubscribeClient = grpc.ServerStreamingClient[Payload]

func (c *xPortalClient) PutFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileShard, Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &XPortal_ServiceDesc.Streams[4], XPortal_PutFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileShard, Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XPortal_PutFileClient = grpc.ClientStreamingClient[FileShard, Empty]

func (c *xPortalClient) FileMd5(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FileMd5Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileMd5Reply)
	err := c.cc.Invoke(ctx, XPortal_FileMd5_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xPortalClient) WatchNodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NodeEventReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &XPortal_ServiceDesc.Streams[5], XPortal_WatchNodes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, NodeEventReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XPortal_WatchNodesClient = grpc.ServerStreamingClient[NodeEventReply]

// XPortalServer is the server API for XPortal service.
// All implementations must embed UnimplementedXPortalServer
// for forward compatibility.
type XPortalServer interface {
	// 查询 agent 节点列表
	Nodes(*Empty, grpc.ServerStreamingServer[NodeReply]) error
	// 执行命令
	ExecCmd(context.Context, *CmdRequest) (*Empty, error)
	// 建立日志接收通道
	RecvLog(*Empty, grpc.ServerStreamingServer[LogReply]) error
	// 获取一般信息，持续推送, 根据agent不同上报调用区分类型
	CollectMsg(*Empty, grpc.ServerStreamingServer[MsgReply]) error
	// 订阅agent上报的数据
	Subscribe(*Empty, grpc.ServerStreamingServer[Payload]) error
	// 上传文件，暂存在channel节点上
	PutFile(grpc.ClientStreamingServer[FileShard, Empty]) error
	// channel上保存文件的md5值信息
	FileMd5(context.Context, *Empty) (*FileMd5Reply, error)
	// 订阅 agent 节点变化
	WatchNodes(*Empty, grpc.ServerStreamingServer[NodeEventReply]) error
	mustEmbedUnimplementedXPortalServer()
}

// UnimplementedXPortalServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedXPortalServer struct{}

func (UnimplementedXPortalServer) Nodes(*Empty, grpc.ServerStreamingServer[NodeReply]) error {
	return status.Errorf(codes.Unimplemented, "method Nodes not implemented")
}
func (UnimplementedXPortalServer) ExecCmd(context.Context, *CmdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecCmd not implemented")
}
func (UnimplementedXPortalServer) RecvLog(*Empty, grpc.ServerStreamingServer[LogReply]) error {
	return status.Errorf(codes.Unimplemented, "method RecvLog not implemented")
}
func (UnimplementedXPortalServer) CollectMsg(*Empty, grpc.ServerStreamingServer[MsgReply]) error {
	return status.Errorf(codes.Unimplemented, "method CollectMsg not implemented")
}
func (UnimplementedXPortalServer) Subscribe(*Empty, grpc.ServerStreamingServer[Payload]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedXPortalServer) PutFile(grpc.ClientStreamingServer[FileShard, Empty]) error {
	return status.Errorf(codes.Unimplemented, "method PutFile not implemented")
}
func (UnimplementedXPortalServer) FileMd5(context.Context, *Empty) (*FileMd5Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileMd5 not implemented")
}
func (UnimplementedXPortalServer) WatchNodes(*Empty, grpc.ServerStreamingServer[NodeEventReply]) error {
	return status.Errorf(codes.Unimplemented, "method WatchNodes not implemented")
}
func (UnimplementedXPortalServer) mustEmbedUnimplementedXPortalServer() {}
func (UnimplementedXPortalServer) testEmbeddedByValue()                 {}

// UnsafeXPortalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XPortalServer will
// result in compilation errors.
type UnsafeXPortalServer interface {
	mustEmbedUnimplementedXPortalServer()
}

func RegisterXPortalServer(s grpc.ServiceRegistrar, srv XPortalServer) {
	// If the following call pancis, it indicates UnimplementedXPortalServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&XPortal_ServiceDesc, srv)
}

func _XPortal_Nodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XPortalServer).Nodes(m, &grpc.GenericServerStream[Empty, NodeReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XPortal_NodesServer = grpc.ServerStreamingServer[NodeReply]

func _XPortal_ExecCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XPortalServer).ExecCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XPortal_ExecCmd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XPortalServer).ExecCmd(ctx, req.(*CmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XPortal_RecvLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XPortalServer).RecvLog(m, &grpc.GenericServerStream[Empty, LogReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XPortal_RecvLogServer = grpc.ServerStreamingServer[LogReply]

func _XPortal_CollectMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XPortalServer).CollectMsg(m, &grpc.GenericServerStream[Empty, MsgReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XPortal_CollectMsgServer = grpc.ServerStreamingServer[MsgReply]

func _XPortal_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XPortalServer).Subscribe(m, &grpc.GenericServerStream[Empty, Payload]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XPortal_SubscribeServer = grpc.ServerStreamingServer[Payload]

func _XPortal_PutFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(XPortalServer).PutFile(&grpc.GenericServerStream[FileShard, Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XPortal_PutFileServer = grpc.ClientStreamingServer[FileShard, Empty]

func _XPortal_FileMd5_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XPortalServer).FileMd5(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XPortal_FileMd5_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XPortalServer).FileMd5(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _XPortal_WatchNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XPortalServer).WatchNodes(m, &grpc.GenericServerStream[Empty, NodeEventReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XPortal_WatchNodesServer = grpc.ServerStreamingServer[NodeEventReply]

// XPortal_ServiceDesc is the grpc.ServiceDesc for XPortal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XPortal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xps.XPortal",
	HandlerType: (*XPortalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecCmd",
			Handler:    _XPortal_ExecCmd_Handler,
		},
		{
			MethodName: "FileMd5",
			Handler:    _XPortal_FileMd5_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Nodes",
			Handler:       _XPortal_Nodes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecvLog",
			Handler:       _XPortal_RecvLog_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CollectMsg",
			Handler:       _XPortal_CollectMsg_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _XPortal_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutFile",
			Handler:       _XPortal_PutFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "WatchNodes",
			Handler:       _XPortal_WatchNodes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "xps/portal.proto",
}
